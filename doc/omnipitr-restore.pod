=head1 OmniPITR - omnipitr-restore

=head2 USAGE

/some/path/omnipitr/bin/omnipitr-restore [options] %f %p

Options:

=over

=item --data-dir (-D)

Where PostgreSQL datadir is located (path) (defaults to current working
directory).

=item --source (-s)

Where I<omnipitr-restore> can find wal segments to use.

Check L<Source specification> for more details.

=item --recovery-delay (-w)

Delay when recovering wal segments (in seconds).

This is primarily used to keep window of safety before I<DELETE * FROM
main_table> will be applied on slave database.

=item --finish-trigger (-f)

Name of file to watch for existence - if it exists, recovery process will stop,
and PostgreSQL slave will become fully functional.

Check L<Finishing recovery> section for more details.

=item --remove-unneeded (-r)

Makes I<omnipitr-restore> remove unneeded wal segments. These are B<not>
segments that were passed to Pg - I<omnipitr-restore> checks last redo segment
to make sure this is safe.

=item --remove-at-a-time (-rt)

When removing old segments, remove at most that many segments before re-entering
loop to check for signals and/or new segment availability for Postgres.

Defaults to 3.

=item --removal-pause-trigger (-p)

Name of file to watch for existence. If it exists - I<omnipitr-restore> will not
remove unneeded wal segments regardless of I<--removal-unneeded> option. This is
to provide a way to make backups on slave.

=item --pre-removal-processing (-h)

If given, argument will be treated as shell command to run when any segment will
be removed from archive.

If the hook will finish without errors - segment will be removed. If there will
be errors - removal procedure will be postponed, and after some time, it will be
retried.

There will be one extra parameter attached, which will be name of the segment
file to be processed (prepared in such a way that it will be relative to current
working directory).

Passed segment will always be uncompressed.

=item --temp-dir (-t)

Where to create temporary files (defaults to /tmp or I<$TMPDIR> environment
variable location). This is only used when using pre-removal-processing.

=item --log (-l)

Name of logfile (actually template, as it supports %% L<strftime(3)>
markers. Unfortunately due to the %x usage by PostgreSQL, We cannot use %%
macros directly. Instead - any occurence of ^ character in log dir will be first
changed to %, and later on passed to strftime.

=item --pid-file

Name of file to use for pidfile. If it is specified, than only one copy of
I<omnipitr-restore> (with this pidfile) can run at the same time.

Trying to run second copy of I<omnipitr-restore> will result in an error.

=item --verbose (-v)

Log verbosely what is happening.

=item --gzip-path (-gp)

Full path to gzip program - in case you can't set proper PATH environment
variable.

=item --bzip2-path (-bp)

Full path to bzip2 program - in case you can't set proper PATH environment
variable.

=item --lzma-path (-lp)

Full path to lzma program - in case you can't set proper PATH environment
variable.

=item --pgcontroldata-path (-pp)

Full path to pg_controldata program - in case you can't set proper PATH
environment variable.

=back

=head2 DESCRIPTION

Call to I<omnipitr-restore> should be in I<restore_command> variable in
I<recovery.conf>.

Which options should be given depends only on installation, but generally you
will need at least:

=over

=item * --data-dir

PostgreSQL "%p" passed file path is relative to I<DATADIR>, so it is required to
know it.

=item * --log

to make sure that information is logged someplace about archiving progress

=item * --source

to specify where to load WAL segments from

=back

If you'll specify more than 1 destination, you will also need to specify
I<--state-dir>

Of couse you can provide many --dst-local or many --dst-remote or many mix of
these.

Generally omnipitr-restore will try to deliver WAL segment to all destinations,
and will fail if B<any> of them will not accept new segment.

Segments will be transferred to destinations in this order:

=over

=item 1. All B<local> destinations, in order provided in command line

=item 2. All B<remote> destinations, in order provided in command line

=back

In case any destination will fail, I<omnipitr-restore> will save state (which
destinations it delivered the file to) and return error to PostgreSQL - which
will cause PostgrerSQL to call I<omnipitr-restore> again for the same WAL
segment after some time.

State directory will be cleared after every successfull file send, so it should
stay small in size (expect 1 file of under 500 bytes).

When constructing command line to put in I<restore_command> PostgreSQL GUC,
please remember that while providing C<"%p" "%f"> will work, I<omnipitr-restore>
requires only "%p"

=head3 Source specification

If the wal segments are compressed you have to prefix source path with
compression type followed by '=' sign.

Allowed compression types:

=over

=item * gzip

Decompresses with gzip program, used file extension is .gz

=item * bzip2

Decompresses with bzip2 program, used file extension is .bz2

=item * lzma

Decompresses with lzma program, used file extension is .lzma

=back

If you want to pass any extra arguments to compression program, you can either:

=over

=item * make a wrapper

Write a program/script that will be named in the same way your actual
compression program is named, but adding some parameters to call

=item * use environment variables

All of supported compression programs use environment variables:

=over

=item * gzip - GZIP

=item * bzip2 - BZIP2

=item * lzma - XZ_OPT

=back

For details - please consult manual to your choosen compression tool.

=back

=head3 Finishing recovery

There are 2 ways I<omnipitr-restore> can finish recovery, and there are 2
separate ways to signal it that it should finish.

First, the finishing procedures:

=over

=item * smart

In this mode I<omnipitr-restore> will feed all available WAL segments to
PostgreSQL (without any I<--recovery-delay> induced delay), and then finish
restoration process.

=item * immediate

In this mode I<omnipitr-restore> will skip all pending WAL segments, and make
PostgreSQL finish recover immediately.

This can be useful in case of running really bad query (think: TRUNCATE users),
and wanting to prevent this change to be replicated to slave.

=back

Now. I<omnipitr-restore> can be signaled into finishing recovery in 2 ways, one
of which is optional.

=over

=item * trigger file

This one is optional. If you will use --finish-trigger switch,
I<omnipitr-restore> will look for this file, and if it exists - it will start
finishing.

If the file exists, and contains string "NOW" (without quotation characters, but
with optional new line character "\n"), I<omnipitr-restore> will enter
"immediate finish" procedure. If the content is different, or the file is empty
- it will proceed in smart finish mode.

=item * system signal

This one works always, regardless of --finish-trigger switch. Generally you can
send system signals (kill) to I<omnipitr-restore> to make it go to finish
recovery procedure.

Only 1 signals are supported:

=over

=item * SIGUSR1

makes the finish I<immediate>

=back

It is currently not possible to forcing 'smart' finishing by signal, due to
the fact that L<omnipitr-restore> is restarted after every segment.

=back

=head3 Segment removal

omnipitr-restore will automatically remove segments that are no longer
necessary.

To make it happen, it will periodically run I<pg_controldata> program, and check
name of last segment required for redo.

If pre-removal-processing is defined, it will be called before actuall removal.

omnipitr-restore will remove segments chronologically - oldest segments first.

One useful idea for pre-removal-processing, is using L<omnipitr-archive> for
processing - to send xlog segments to some permanent storage place.

=head2 EXAMPLES

=head3 Minimal setup:

    restore_command='/.../omnipitr-restore -l /var/log/omnipitr/restore.log -s /mnt/wal_restore/ %f %p'

=head3 Minimal setup, but with defined finish trigger and recovery delay (5
mintues):

    restore_command='/.../omnipitr-restore -D /mnt/data/ -l /var/log/omnipitr/restore.log -s /mnt/wal_restore/ -w 300 -f /tmp/finish.trigger %f %p'

=head3 Setup as above, but with pause trigger defined for doing backups-on-slave and removing unneeded segments

    restore_command='/.../omnipitr-restore -D /mnt/data/ -l /var/log/omnipitr/restore.log -s /mnt/wal_restore/ -w 300 -f /tmp/finish.trigger -r -p /tmp/pause.trigger %f %p'

=head3 Minimal setup, but with backing up segments to remote server:

    restore_command='/.../omnipitr-restore -l /var/log/omnipitr/restore.log -s /mnt/wal_restore/ -h "/.../omnipitr-archive --force-data-dir -l /var/log/omnipitr/archive.log -dr bzip2=rsync://backup/postgres/xlogs/" %f %p'

=head2 COPYRIGHT

The OmniPITR project is Copyright (c) 2009-2010 OmniTI. All rights reserved.

